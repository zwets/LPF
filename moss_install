#!/usr/bin/env python3
import argparse
import os
import sys
import subprocess

def main(command_line=None):
    parser = argparse.ArgumentParser('MOSS INSTALL COMMANDS')
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Print debug info'
    )
    subparsers = parser.add_subparsers(dest='command')
    all = subparsers.add_parser('all', help='Complete installation of ONT deps, MOSS deps and build app. Recommended for first installation or complete reinstallation.')
    ont = subparsers.add_parser('ont', help='ONT repos for ubuntu 22.')
    moss_deps = subparsers.add_parser('moss_deps', help='Local dependencies for MOSS')
    moss_databses = subparsers.add_parser('moss_databses', help='Downloads databases for MOSS')
    moss_build = subparsers.add_parser('moss_build', help='Build MOSS app and relocates report to /opt/moss ( Requires moss_deps to be installed in advance.')
    check_deps = subparsers.add_parser('check_deps', help='Check for MOSS dependencies.')

    args = parser.parse_args(command_line)
    if not os.path.exists('~/bin/'):
        os.system('sudo mkdir ~/bin/')
    if args.command == 'all':
        install_ont_deps()
        install_moss_deps()
        moss_build()
    elif args.command == 'ont':
        install_ont_deps()
    elif args.command == 'moss_deps':
        install_moss_deps()
    elif args.command == 'moss_databses':
        #STFP solution with Maja
        #Mkdir /opt/moss_databases
        #Download databases
        pass
    elif args.command == 'moss_build':
        moss_build_app()
    elif args.command == 'check_deps':
        #Check conda
        ont_check = check_ont_deps()
        docker_images_result = check_docker_images()
        pip_deps_result = check_pip_deps()
        google_chrome_result = check_google_chrome()
        #Check app

        check_list = ["ONT dependencies", "Docker images", "Pip dependencies", "Google Chrome"]
        for item in check_list:
            if item == "ONT dependencies":
                if ont_check:
                    print(item + " are installed")
                else:
                    print(item + " are not installed")
            elif item == "Docker images":
                if docker_images_result:
                    print(item + " are installed")
                else:
                    print(item + " are not installed")
            elif item == "Pip dependencies":
                if pip_deps_result:
                    print(item + " are installed")
                else:
                    print(item + " are not installed")
            elif item == "Google Chrome":
                if google_chrome_result:
                    print(item + " is installed")
                else:
                    print(item + " is not installed")

        pass
    os.system("cp moss_install ~/bin/moss_install")
    #CP mossinstall to bin

def moss_build_app():
    build_app()
    check_dist_build()
    move_moss_repo(os.getcwd())

def install_moss_deps():
    os.system(
        "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -nv; sudo apt install ./google-chrome-stable_current_amd64.deb; rm google*")
    os.system("pip install -r requirements.txt")
def install_ont_deps():
    os.system("sudo apt update")
    os.system("sudo apt upgrade")
    os.system("wget http://apt.kcri.it/debs/kcri-apt-repo_1.0.0_all.deb")
    os.system("sudo apt install ./kcri-apt-repo_1.0.0_all.deb")
    os.system("sudo apt update")
    os.system("sudo apt install kcri-seqtz-repos")
    os.system("sudo apt update")
    os.system("sudo apt install kcri-seqtz-deps")
    os.system('sudo groupadd docker; sudo usermod -aG docker $USER; sudo chmod 666 /var/run/docker.sock')


def check_google_chrome():
    proc = subprocess.Popen("apt list --installed | grep \"google-chrome\"", shell=True,
                            stdout=subprocess.PIPE, )
    output = proc.communicate()[0].decode().split("\n")
    for item in output[0:-1]:
        if item.startswith("google-chrome"):
            print("Google Chrome" + " is installed")
            return True
    print("Google Chrome is not installed")
    return False
def check_app_build():
    pass
def check_docker_images():
    docker_list = [
        "biocontainers/figtree:v1.4.4-3-deb_cv1",
        "staphb/quast:5.0.2",
        "nanozoo/bandage:0.8.1--7da3a06",
    ]
    proc = subprocess.Popen("docker images", shell=True,
                            stdout=subprocess.PIPE, )
    output = proc.communicate()[0].decode().split("\n")

    if "REPOSITORY" not in output[0]:
        print("Docker is not installed")
        return False

    for item in output[0:-1]:
        item = item.split()
        name = item[0] + ":" + item[1]
        if name in docker_list:
            print (name + " is installed")
            docker_list.remove(name)
    if len(docker_list) > 0:
        print ("The following docker images are missing:")
        for item in docker_list:
            print (item)
        return False
    else:
        return True
def check_ont_deps():
    check_list = [
        '/opt/moss',
        '/opt/moss_data',
        '/opt/moss_db',
        '/opt/ont',
        '/opt/ont/guppy',
        '/opt/ont/minknow',
        '/lib/systemd/system/guppyd.service'
    ]
    for item in check_list:
        if os.path.exists(item):
            print(item + " is installed")
        else:
            print(item + " is not installed")
            return False
    return True

def check_pip_deps():
    pip_list = [
        "geocoder",
        "geopy",
        "nominatim",
        "tabulate",
        "biopython",
        "cgecore",
        "dataframe-image",
        "fpdf2",
    ]
    proc = subprocess.Popen("pip list", shell=True,
                            stdout=subprocess.PIPE, )
    output = proc.communicate()[0].decode().split("\n")
    for item in output[0:-1]:
        item = item.split()
        name = item[0]
        if name in pip_list:
            print(name + " is installed")
            pip_list.remove(name)
    if len(pip_list) > 0:
        print("The following pip packages are missing:")
        for item in pip_list:
            print(item)
        return False
    else:
        return True

def check_dist_build():
    if not os.path.isfile("local_app/dist/linux-unpacked/moss"):
        sys.exit("A MOSS distribution was not created correctly. Installation was not completed")
    else:
        print ("The installation was completed")

def build_app():
    os.system("cd local_app; chmod a+x moss_launch; npm i; ./node_modules/.bin/electron-rebuild; npm run dist;sudo cp moss.desktop /usr/share/applications/.; cd ..")
    return True

def move_moss_repo(cwd):
    if (cwd != '/opt/moss'):
        os.system("rm -rf /opt/moss")
        os.system("sudo cp -r {} /opt/moss".format(cwd))
        os.system("sudo rm -r {}".format(cwd))

if __name__ == '__main__':
    main()