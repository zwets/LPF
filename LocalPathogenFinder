#!/usr/bin/env python3

###############################################################################
# Main script for running LPF
###############################################################################

import argparse
import logging
import json
import os

from src.loggingHandlers import begin_logging
from scripts.version import __version__
from src.createBacterialParser import BacterialParser
from src.kmaRunner import KMARunner
from src.bacterialAnalysis import bacterial_analysis_pipeline
import scripts.LPFInstall as LPFInstall
import src.util.md5 as md5
from src.util.cleanFailedRun import clean_failed_run
#from scripts.validateDatabases import ValidateDatabases



def main(arguments):
    """Main function"""
    try:
        if arguments.subparser_name == 'install':
            LPFInstall.LPF_installation(arguments)
        elif arguments.subparser_name == 'bacteria':
            bacterial_parser = BacterialParser(arguments.json)
            bacterial_analysis_pipeline(bacterial_parser)
            pass
        elif arguments.subparser_name == 'viral':
            pass
        elif arguments.subparser_name == 'metagenomic':
            pass
    except Exception as e:
        logging.exception(e)
        clean_failed_run(arguments.json)
        raise e


if __name__ == '__main__':
    # initialize the options parser
    parser = argparse.ArgumentParser('Local Pathogen Finder', add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    bacterial_parser = subparsers.add_parser('bacteria',
                                             help='Bacterial analysis'
                                             )
    bacterial_parser.add_argument('-json', action="store", type=str, default="", dest="json")

    viral_parser = subparsers.add_parser('virus',
                            help='Viral sample. Currently under development',
                             )
    viral_parser.add_argument('-json', action="store", type=str, default="", dest="json")
    metagenomic_parser = subparsers.add_parser('metagenomic',
                             help='Metagenomic sample. Currently under development',
                             )
    metagenomic_parser.add_argument('-json', action="store", type=str, default="", dest="json")
    install_parser = subparsers.add_parser('install',
                                           help='Install',
                                           )
    install_parser.add_argument('-complete', action="store_true", default=False, dest="complete", help="Complete installation of databases, LPF software and the LBP GUI.")
    install_parser.add_argument('-install_databases', action="store_true", default=False, dest="install_databases", help="Install databases.")
    install_parser.add_argument('-bacteria_db', action="store", dest="bacteria_db", help="Path to existing bacteria database stored locally.")
    install_parser.add_argument('-mlst_db', action="store", dest="mlst_db", help="Path to existing mlst database stored locally.")
    install_parser.add_argument('-virulencefinder_db', action="store", dest="virulencefinder_db", help="Path to existing virulence database stored locally.")
    install_parser.add_argument('-resfinder_db', action="store", dest="resfinder_db", help="Path to existing resfinder database stored locally.")
    install_parser.add_argument('-plasmidfinder_db', action="store", dest="plasmidfinder_db", help="Path to existing plasmidfinder database stored locally.")
    install_parser.add_argument('-app', action="store_true", default=False, dest="app", help="Rebuild application.")
    install_parser.add_argument('-check_deps', action="store_true", default=False, dest="check_deps", help="Dependency check.")
    install_parser.add_argument('-ci', action="store_true", default=False, dest="ci", help="install for CI tests - DO NOT USE.")
    update_parser = subparsers.add_parser('update',
                                            help='Update',
                                            )
    clean_parser = subparsers.add_parser('clean',
                                            help='Clean',
                                            )


    parser.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    parser.add_argument('-h', '--help', action='help', help='Show this help message and exit')


    args = parser.parse_args()

    try:
        main(args)
    except Exception as e:
        logging.error(e, exc_info=True)
        r_type = None
        raise